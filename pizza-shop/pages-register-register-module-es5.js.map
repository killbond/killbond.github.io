{"version":3,"sources":["webpack:///src/app/pages/register/register-routing.module.ts","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.component.html","webpack:///src/app/pages/register/register.module.ts","webpack:///src/app/services/user.service.ts"],"names":["routes","path","component","RegisterRoutingModule","forChild","imports","exports","RegisterComponent","userService","auth","router","faSpinner","errors","sending","register","newUser","pipe","errorHandling","bind","login","email","password","navigate","subscribe","response","error","hasOwnProperty","name","password_confirmation","passwordConfirmation","phone","selector","templateUrl","styleUrls","RegisterModule","declarations","UserService","api","user","post","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMA,MAAM,GAAW,CAAC;AAACC,UAAI,EAAE,EAAP;AAAWC,eAAS,EAAE;AAAtB,KAAD,CAAvB;;QAMaC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,gBAHvB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGuB,EAFtB,4DAEsB;;;;0HAArBG,qB,EAAqB;AAAA;AAAA,kBAFtB,4DAEsB;AAAA,O;AAFV,K;;;;;sEAEXA,qB,EAAqB;cAJjC,sDAIiC;eAJxB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIwB,Q;;;;;;;;;;;;;;;;;;ACXlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACWM;;AAAkE;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAUlE;;AAAmE;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAUnE;;AAAmE;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAUnE;;AAAsE;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAUtE;;AAAmF;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAIjF;;;;;;AAAyB,2FAAkB,MAAlB,EAAkB,IAAlB;;;;;;;;;;;;QDvCpBC,iB;AAkBX,iCACUC,WADV,EAEUC,IAFV,EAGUC,MAHV,EAGwB;AAAA;;AAFd,aAAAF,WAAA,GAAAA,WAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AAnBV,aAAAC,SAAA,GAAY,+EAAZ;AAYA,aAAAC,MAAA,GAAiC,EAAjC;AAEA,aAAAC,OAAA,GAAmB,KAAnB;AAOC;;;;mCAEO,CACP;;;mCAEO;AAAA;;AACN,eAAKL,WAAL,CAAiBM,QAAjB,CAA0B,KAAKC,OAAL,EAA1B,EACGC,IADH,CAEI,kEAAW,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAX,CAFJ,EAGI,gEAAS;AAAA,mBAAM,KAAI,CAACL,OAAL,GAAe,KAArB;AAAA,WAAT,CAHJ,EAII,iEAAU;AAAA,mBAAM,KAAI,CAACJ,IAAL,CAAUU,KAAV,CAAgB,KAAI,CAACC,KAArB,EAA4B,KAAI,CAACC,QAAjC,CAAN;AAAA,WAAV,CAJJ,EAKI,iEAAU;AAAA,mBAAM,KAAI,CAACX,MAAL,CAAYY,QAAZ,CAAqB,CAAC,OAAD,CAArB,CAAN;AAAA,WAAV,CALJ,EAMIC,SANJ;AAOD;;;4CAEsC;AAAA,cAATC,QAAS,QAAhBC,KAAgB;;AACrC,cAAID,QAAQ,CAACE,cAAT,CAAwB,QAAxB,CAAJ,EAAuC;AACrC,iBAAKd,MAAL,GAAeY,QAAiC,CAACZ,MAAjD;AACD;;AACD,iBAAO,iDAAP;AACD;;;kCAEc;AACb,iBAAO;AACLe,gBAAI,EAAE,KAAKA,IADN;AAELN,oBAAQ,EAAE,KAAKA,QAFV;AAGLO,iCAAqB,EAAE,KAAKC,oBAHvB;AAILT,iBAAK,EAAE,KAAKA,KAJP;AAKLU,iBAAK,EAAE,KAAKA;AALP,WAAP;AAOD;;;;;;;uBArDUvB,iB,EAAiB,mI,EAAA,mI,EAAA,uH;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,c;AAAA,kgC;AAAA;AAAA;AChB9B;;AACE;;AAAM;AAAA,mBAAY,IAAAO,QAAA,EAAZ;AAAsB,WAAtB;;AACJ;;AAAwB;;AAAM;;AAC9B;;AACE;;AAAO;AAAA;AAAA;;AAAP;;AAOA;;AACF;;AACA;;AACE;;AAAO;AAAA;AAAA;;AAAP;;AAOA;;AACF;;AACA;;AACE;;AAAO;AAAA;AAAA;;AAAP;;AAOA;;AACF;;AACA;;AACE;;AAAO;AAAA;AAAA;;AAAP;;AAOA;;AACF;;AACA;;AACE;;AAAO;AAAA;AAAA;;AAAP;;AAOA;;AACF;;AACA;;AACE;;AACE;;AACA;;AACF;;AACF;;AACF;;AACA;;AACE;;AAA4B;;AAAY;;AACxC;;AAA6B;;AAAM;;AACrC;;AACF;;;;AA3Da;;AAAA;;AADA;;AAOF;;AAAA;;AAIE;;AAAA;;AADA;;AAOF;;AAAA;;AAIE;;AAAA;;AADA;;AAOF;;AAAA;;AAIE;;AAAA;;AADA;;AAOF;;AAAA;;AAIE;;AAAA;;AADA;;AAOF;;AAAA;;AAGG;;AAAA;;AACG;;AAAA;;AAMV;;AAAA;;AACA;;AAAA;;;;;;;;;sED9CMP,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTwB,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEhB9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAoBaC,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,gBARhB,CACP,4DADO,EAEP,8EAFO,EAGP,0DAHO,EAIP,kFAJO,EAKP,2DALO,CAQgB;;;;0HAAdA,c,EAAc;AAAA,uBATV,qEASU;AATO,kBAE9B,4DAF8B,EAG9B,8EAH8B,EAI9B,0DAJ8B,EAK9B,kFAL8B,EAM9B,2DAN8B;AASP,O;AAHX,K;;;;;sEAGHA,c,EAAc;cAV1B,sDAU0B;eAVjB;AACRC,sBAAY,EAAE,CAAC,qEAAD,CADN;AAER9B,iBAAO,EAAE,CACP,4DADO,EAEP,8EAFO,EAGP,0DAHO,EAIP,kFAJO,EAKP,2DALO;AAFD,S;AAUiB,Q;;;;;;;;;;;;;;;;;;ACpB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa+B,W;AAEX,2BACUC,GADV,EACyB;AAAA;;AAAf,aAAAA,GAAA,GAAAA,GAAA;AAET;;;;iCAEQC,I,EAAgC;AACvC,iBAAO,KAAKD,GAAL,CAASE,IAAT,CAAc,OAAd,EAAuBD,IAAvB,CAAP;AACD;;;;;;;uBATUF,W,EAAW,+G;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVI,oBAAU,EAAE;AADF,S;AAGY,Q","file":"pages-register-register-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { RegisterComponent } from './register.component';\n\nconst routes: Routes = [{path: '', component: RegisterComponent}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule {\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ValidationBagInterface } from \"../../interfaces/validation-bag.interface\";\nimport { UserService } from \"../../services/user.service\";\nimport { UserCreateRequestInterface } from \"../../interfaces/user-create-request.interface\";\nimport { catchError, finalize, switchMap } from \"rxjs/operators\";\nimport { Observable, of } from \"rxjs\";\nimport { ApiResponseInterface } from \"../../interfaces/api-response.interface\";\nimport { Router } from \"@angular/router\";\nimport { AuthService } from \"../../services/auth.service\";\nimport { faCircleNotch } from \"@fortawesome/free-solid-svg-icons\";\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  faSpinner = faCircleNotch\n\n  email: string\n\n  password: string\n\n  passwordConfirmation: string\n\n  name: string\n\n  phone: string\n\n  errors: ValidationBagInterface = {}\n\n  sending: boolean = false\n\n  constructor(\n    private userService: UserService,\n    private auth: AuthService,\n    private router: Router\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  register(): void {\n    this.userService.register(this.newUser())\n      .pipe(\n        catchError(this.errorHandling.bind(this)),\n        finalize(() => this.sending = false),\n        switchMap(() => this.auth.login(this.email, this.password)),\n        switchMap(() => this.router.navigate(['/menu'])),\n      ).subscribe()\n  }\n\n  private errorHandling({error: response}): Observable<void> {\n    if (response.hasOwnProperty('errors')) {\n      this.errors = (response as ApiResponseInterface).errors\n    }\n    return of()\n  }\n\n  private newUser(): UserCreateRequestInterface {\n    return {\n      name: this.name,\n      password: this.password,\n      password_confirmation: this.passwordConfirmation,\n      email: this.email,\n      phone: this.phone,\n    }\n  }\n\n}\n","<div class=\"register-form\">\n  <form (ngSubmit)=\"register()\">\n    <h2 class=\"text-center\">Log in</h2>\n    <div class=\"form-group\">\n      <input [(ngModel)]=\"name\"\n             [class.is-invalid]=\"errors.hasOwnProperty('name')\"\n             class=\"form-control\"\n             name=\"name\"\n             placeholder=\"Name\"\n             required\n             type=\"text\">\n      <div *ngFor=\"let message of errors.name\" class=\"invalid-feedback\">{{ message }}</div>\n    </div>\n    <div class=\"form-group\">\n      <input [(ngModel)]=\"email\"\n             [class.is-invalid]=\"errors.hasOwnProperty('email')\"\n             class=\"form-control\"\n             name=\"email\"\n             placeholder=\"Email\"\n             required\n             type=\"text\">\n      <div *ngFor=\"let message of errors.email\" class=\"invalid-feedback\">{{ message }}</div>\n    </div>\n    <div class=\"form-group\">\n      <input [(ngModel)]=\"phone\"\n             [class.is-invalid]=\"errors.hasOwnProperty('phone')\"\n             class=\"form-control\"\n             name=\"phone\"\n             placeholder=\"Phone\"\n             required\n             type=\"text\">\n      <div *ngFor=\"let message of errors.phone\" class=\"invalid-feedback\">{{ message }}</div>\n    </div>\n    <div class=\"form-group\">\n      <input [(ngModel)]=\"password\"\n             [class.is-invalid]=\"errors.hasOwnProperty('password')\"\n             class=\"form-control\"\n             name=\"password\"\n             placeholder=\"Password\"\n             required\n             type=\"password\">\n      <div *ngFor=\"let message of errors.password\" class=\"invalid-feedback\">{{ message }}</div>\n    </div>\n    <div class=\"form-group\">\n      <input [(ngModel)]=\"passwordConfirmation\"\n             [class.is-invalid]=\"errors.hasOwnProperty('password_confirmation')\"\n             class=\"form-control\"\n             name=\"password_confirmation\"\n             placeholder=\"Password confirmation\"\n             required\n             type=\"password\">\n      <div *ngFor=\"let message of errors.password_confirmation\" class=\"invalid-feedback\">{{ message }}</div>\n    </div>\n    <div class=\"form-group\">\n      <button [disabled]=\"sending\" class=\"btn btn-primary btn-block\" type=\"submit\">\n        <fa-icon *ngIf=\"sending\" [icon]=\"faSpinner\" [spin]=\"true\"></fa-icon>\n        Register\n      </button>\n    </div>\n  </form>\n  <div class=\"d-flex justify-content-around\">\n    <a [routerLink]=\"['/menu']\">Back to menu</a>\n    <a [routerLink]=\"['/login']\">Log in</a>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegisterRoutingModule } from './register-routing.module';\nimport { RegisterComponent } from './register.component';\nimport { SharedModule } from \"../../shared.module\";\nimport { FormsModule } from \"@angular/forms\";\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\n\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RegisterRoutingModule,\n    FormsModule,\n    FontAwesomeModule,\n    SharedModule,\n  ]\n})\nexport class RegisterModule {\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from \"./api.service\";\nimport { Observable } from \"rxjs\";\nimport { UserCreateRequestInterface } from \"../interfaces/user-create-request.interface\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(\n    private api: ApiService\n  ) {\n  }\n\n  register(user: UserCreateRequestInterface): Observable<any> {\n    return this.api.post('users', user)\n  }\n}\n"]}